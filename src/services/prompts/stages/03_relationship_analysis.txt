# OBJECTIVE
Extract ONLY relationship fields from BOTH offline URLs and Jikan relations data. Consolidate and categorize properly based on media type and relation type.

# INPUT DATA
## ORIGINAL RELATED ANIME URLS:
{related_anime_urls}

## JIKAN RELATIONS DATA:
{jikan_relations_data}

## ANIMESCHEDULE RELATIONS DATA:
{animeschedule_relations_data}

# PROCESSING INSTRUCTIONS

## MANDATORY CONSOLIDATION REQUIREMENT
You MUST process ALL THREE input sources and consolidate them properly:

### SOURCE 1: OFFLINE URLs (always anime)
- Process ALL offline URLs → goes to `relatedAnime` array
- Extract meaningful titles using intelligent cross-URL analysis

### SOURCE 2: JIKAN RELATIONS DATA (categorized by media type)
- **Check URL to determine media type**:
  - **URLs containing "/manga/"** → manga/source material → goes to `relations` array
  - **URLs containing "/anime/"** → anime content → goes to `relatedAnime` array
- **Extract relation_type directly from Jikan response** (use the "relation" field from each relation group)
- **If relation_type is unclear or missing**, analyze the title/URL content to intelligently determine the relationship

### SOURCE 3: ANIMESCHEDULE RELATIONS DATA (anime content)
- **All AnimSchedule relations are anime content** → goes to `relatedAnime` array
- **Map AnimSchedule relation types to standard types**:
  - `prequels` → `"Prequel"`
  - `alternatives` → `"Alternative Version"`
  - `sideStories` → `"Side Story"`
  - `other` → `"Other"`
- **Convert route slugs to titles** (e.g., "one-piece-film-red" → "One Piece Film: Red")
- **Convert routes to full URLs**: `https://animeschedule.net/anime/{route}`

## DEDUPLICATION REQUIREMENT
- Check for duplicates between ALL THREE sources (offline URLs, Jikan relations, AnimSchedule relations)
- **Priority order**: Jikan > AnimSchedule > Offline URLs (most detailed first)
- Match by title similarity, URL similarity, or route similarity
- If same anime appears in multiple sources, keep the highest priority version (most detailed)

## MANDATORY INTELLIGENT TITLE EXTRACTION
You MUST extract meaningful titles for ALL URLs. NO exceptions for "Anime [ID]" or generic patterns.

### INTELLIGENT CROSS-REFERENCE ANALYSIS:
1. **Scan ALL URLs first** to identify explicit title patterns
2. **Use explicit URLs to infer numeric ID meanings**
3. **Apply consistent titles across platforms for same content**

### SPECIFIC EXTRACTION RULES:

**FOR EXPLICIT TITLE URLS** (anime-planet, etc.):
- `https://anime-planet.com/anime/dandadan-2nd-season` → "Dandadan 2nd Season"
- `https://anime-planet.com/anime/creepy-nuts-otonoke` → "Creepy Nuts Otonoke"  
- `https://anime-planet.com/anime/zutomayo-taidada` → "Zutomayo Taidada"

**FOR NUMERIC ID URLS** (MAL, AniList, etc.):
- Use the explicit title patterns to infer what these IDs represent
- If you see "dandadan-2nd-season" in ANY URL, then ALL other URLs likely refer to "Dandadan 2nd Season"
- If you see theme song patterns, apply to related numeric IDs

### INTELLIGENT RELATIONSHIP TYPE EXTRACTION:

**PRIMARY METHOD: Extract from Jikan Response**
- Use the "relation" field from Jikan relations data as the primary source
- Common Jikan relation types: "Side Story", "Summary", "Alternative Version", "Character", "Other", "Special", "Sequel", "Prequel", "Spin-off"

**FALLBACK METHOD: Intelligent Content Analysis**
If relation type is unclear from Jikan or for offline URLs, analyze title/URL patterns:
- **"Episode of"/"Recap"/"Log"** → "Summary"  
- **"Special"/"OVA"** → "Special"
- **"Season 2"/"Part 2"** → "Sequel"
- **"Prequel"/"Origin"** → "Prequel"
- **"Alternative"/"Retelling"** → "Alternative Version"
- **Crossover content** → "Character"
- **Movies/Films/Specials** → "Side Story" (but prefer Jikan's categorization)
- **Default fallback** → "Other"

**SITE CONTENT ANALYSIS** (if title analysis insufficient):
- Visit the URL to extract additional context about the relationship
- Look for keywords in page content that indicate relationship type
- Use site-specific patterns (e.g., MyAnimeList relation indicators)

### FORBIDDEN PATTERNS:
❌ "Anime 19060" - NEVER USE THIS
❌ "Unknown Title" - NEVER USE THIS  
❌ "Anime [ID]" - NEVER USE THIS
❌ Any generic ID-based titles

### MANDATORY PROCESSING APPROACH:
1. **Identify explicit titles** from clear URL patterns
2. **Group URLs by content** (same anime = same title across platforms)
3. **Apply consistent titles** to all URLs referring to same content
4. **Infer relationship types** based on extracted titles

# OUTPUT SCHEMA
Return ONLY these extracted fields in JSON format:

{{
    "relatedAnime": [{{
        "relation_type": "intelligently_extracted_relation_type", 
        "title": "meaningful_extracted_title", 
        "url": "exact_original_URL"
    }}],
    "relations": [{{
        "anime_id": "relation-id",
        "relation_type": "intelligently_extracted_relation_type", 
        "title": "Related work title",
        "urls": {{
            "mal": "https://myanimelist.net/manga/123"
        }}
    }}]
}}

## CONSOLIDATION LOGIC:
1. **Process offline URLs** → add to `relatedAnime` with inferred relation_type
2. **Process Jikan relations** (use URL-based detection):
   - **URLs containing "/manga/"** → add to `relations` array
   - **URLs containing "/anime/"** → add to `relatedAnime` array (check for duplicates first)
3. **Process AnimSchedule relations** → add to `relatedAnime` with mapped relation_type (check for duplicates first)
4. **Final arrays**:
   - `relatedAnime`: ALL anime content from all three sources (deduplicated)
   - `relations`: ONLY manga/source material from Jikan (determined by URL containing "/manga/")

CRITICAL: Every URL MUST have a meaningful, specific title. NO generic "Anime [ID]" patterns allowed.

VERIFICATION REQUIREMENT: Total entries should be comprehensive from all three sources, with proper categorization and no duplicates.

IMPORTANT: Your response must be ONLY valid JSON. Do not include any text before or after the JSON. Do not explain your process. Return only the JSON object with the exact schema above.