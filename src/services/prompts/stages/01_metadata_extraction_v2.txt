# METADATA EXTRACTION STAGE - MULTI-SOURCE INTEGRATION
Extract metadata from Jikan, AnimSchedule, and Kitsu APIs with proper categorization merging and consistent output format.

## INPUT DATA
### JIKAN DATA:
{jikan_core_data}

### ANIMESCHEDULE DATA:
{animeschedule_data}

### KITSU DATA:
{kitsu_data}

## STATISTICS ENTRY FORMAT
StatisticsEntry format includes these standardized fields:
- score: Rating score (0-10 scale as float)
- scored_by: Number of users who rated (integer)
- rank: Overall ranking position (integer)
- popularity_rank: Popularity ranking position (integer)
- members: Total users tracking (integer)
- favorites: Users who favorited (integer)

## EXTRACTION RULES

### CATEGORIZATION & LINKS (Multi-Source Integration):
- **genres**: Extract from Jikan genres + AnimSchedule genres (combine, no duplicates)
- **demographics**: Extract from Jikan demographics array only
- **themes**: Extract from Jikan themes + Kitsu categories with intelligent merging:
  1. Add all Jikan themes with their descriptions (null if no description)
  2. For each Kitsu category:
     - Skip if name exists in genres (case-insensitive comparison)
     - Skip if theme name already exists AND has description (case-insensitive comparison)
     - If theme name exists but has null description: Update that theme's description only
     - Otherwise: Add new theme with name + description
- **external_links**: Extract from Jikan external links + AnimSchedule websites object:
  - Ensure no duplication of URLs or property names
  - If same URL exists in both sources, keep only one instance
  - If same property name exists in both sources, merge or keep non-conflicting entries
- **images**: Extract from Jikan + AnimSchedule + Kitsu organized by image type:
  - Jikan: Extract from images.jpg.large_image_url → add to covers array
  - AnimSchedule: Extract from imageVersionRoute (prepend "https://img.animeschedule.net/production/assets/public/img/") → add to covers array
  - Kitsu: Extract with type inference:
    - posterImage.original → add to posters array
    - coverImage.original → add to covers array
  - Ensure no duplication of URLs within each image type array
  - Add source attribution ("jikan", "animeschedule", "kitsu") to each image
- **source_material**: Extract from Jikan source field
- **rating**: Extract from Jikan rating field
- **content_warnings**: Infer from Jikan rating and content

### CORE METADATA (Jikan Primary):
- **synopsis**: Extract from Jikan synopsis field or null
- **title_japanese**: Extract Japanese title from Jikan
- **title_english**: Extract English title from Jikan
- **background**: Extract background information from Jikan
- **aired_dates**: Extract aired information from Jikan (from, to, string)
- **broadcast**: Extract broadcast information from Jikan (day, time, timezone)
- **statistics**: Create mal statistics object with standardized StatisticsEntry format:
  - score → score (as float, already 0-10 scale)
  - scored_by → scored_by
  - rank → rank
  - popularity → popularity_rank
  - members → members
  - favorites → favorites

### ANIMESCHEDULE ENHANCEMENTS:
- **broadcast_schedule**: Extract broadcast timing information from AnimeSchedule:
  - jpn_time: AnimSchedule jpnTime field (original Japanese broadcast time)
  - sub_time: AnimSchedule subTime field (subtitled version release time)
  - dub_time: AnimSchedule dubTime field (dubbed version release time)
- **premiere_dates**: Extract premiere information from AnimeSchedule:
  - original: AnimSchedule premier field (first Japanese episode date)
  - sub: AnimSchedule subPremier field (first subtitled episode date)
  - dub: AnimSchedule dubPremier field (first dubbed episode date)
- **delay_information**: Extract delay status from AnimeSchedule:
  - delayed_timetable: AnimSchedule delayedTimetable field
  - delayed_from: AnimSchedule delayedFrom field
  - delayed_until: AnimSchedule delayedUntil field
  - delay_reason: AnimSchedule delayedDesc field (reason for delay)
- **episode_overrides**: Extract episode override information from AnimeSchedule:
  - main_override: AnimSchedule episodeOverride object (overrideDate, overrideEpisode, episodesAired)
  - sub_override: AnimSchedule subEpisodeOverride object (overrideDate, overrideEpisode, episodesAired)
  - dub_override: AnimSchedule dubEpisodeOverride object (overrideDate, overrideEpisode, episodesAired)
- **statistics**: Create animeschedule statistics object with standardized StatisticsEntry format:
  - averageScore → score (as float, normalized to 0-10 scale)
  - ratingCount → scored_by  
  - trackedCount → members
  - trackedRating → rank
- **month**: Extract premiere month from AnimSchedule

### KITSU ENHANCEMENTS:
- **nsfw**: Extract from nsfw field (boolean)
- **statistics**: Create kitsu statistics object with standardized StatisticsEntry format:
  - averageRating → score (÷10 as float, e.g., "82.14" → 8.214)
  - userCount → members
  - favoritesCount → favorites
  - popularityRank → popularity_rank
  - ratingRank → rank

## CRITICAL REQUIREMENTS

1. **INTELLIGENT CATEGORIZATION MERGING**: 
   - Combine Jikan and AnimSchedule genres, remove duplicates
   - Intelligent theme merging with case-insensitive comparison:
     - Skip Kitsu categories that match existing genre names
     - Skip Kitsu categories that match existing theme names with descriptions
     - Update existing themes with null descriptions using Kitsu descriptions
     - Add new themes from Kitsu categories that don't conflict

2. **PROPER THEMES STRUCTURE**: 
   - Output themes as array of objects: [{"name": "Theme Name", "description": "Description or null"}]
   - Jikan themes: {"name": "theme_name", "description": null}
   - Kitsu categories: {"name": "category_name", "description": "category_description"}

3. **MULTI-SOURCE EXTERNAL LINK DEDUPLICATION**: 
   - Extract external links from both Jikan and AnimSchedule sources
   - Ensure no duplication of URLs or property names
   - If same URL exists in both sources, keep only one instance
   - If same property name exists in both sources, merge or keep non-conflicting entries
   - Maintain proper naming from both sources

4. **ORGANIZED IMAGE TYPE HANDLING**: 
   - Extract images from Jikan, AnimSchedule, and Kitsu organized by image type
   - Create separate arrays: posters, covers (and potentially banners, screenshots in future)
   - Kitsu type inference: posterImage.original → posters array, coverImage.original → covers array
   - Jikan and AnimSchedule images → covers array
   - AnimSchedule: prepend "https://img.animeschedule.net/production/assets/public/img/" to imageVersionRoute
   - Ensure no duplication of URLs within each image type array
   - Add source attribution to each image object
   - Do not include type field in image objects (type is implied by array organization)

5. **STATISTICS MAPPING**: 
   - Create nested structure with mal, animeschedule, and kitsu keys containing StatisticsEntry format
   - Normalize scores to 0-10 scale as floats (Kitsu: ÷10, MAL: already 0-10, AnimSchedule: as-is)
   - Omit fields that are not available for each source (don't use null values)

6. **HANDLE MISSING DATA**: 
   - If any API data is missing or null, set corresponding output fields to null
   - Continue processing with available data sources

## OUTPUT FORMAT
**IMPORTANT: The values shown below are EXAMPLES ONLY. Extract actual data from the provided APIs.**

{
  "synopsis": "Edward Elric, a young, brilliant alchemist, has lost much in his twelve-year life...", // EXAMPLE - Extract actual synopsis
  "genres": ["Action", "Adventure", "Fantasy", "Drama"], // EXAMPLE - Extract actual genre names from Jikan + AnimSchedule
  "demographics": ["Shounen"], // EXAMPLE - Extract actual demographic names from Jikan
  "themes": [
    {"name": "Military", "description": null}, // EXAMPLE - From Jikan themes
    {"name": "Magic", "description": "Magic is the art of purportedly manipulating aspects of reality either by supernatural means or through knowledge of unknown occult laws."}, // EXAMPLE - From Kitsu categories
    {"name": "Violence", "description": "Physical force against self or other, compelling action against one's will on pain of being hurt."}
  ],
  "source_material": "Manga", // EXAMPLE - Extract actual source material
  "rating": "R - 17+ (violence & profanity)", // EXAMPLE - Extract actual rating
  "content_warnings": ["Violence", "Strong Language"], // EXAMPLE - Extract actual content warnings
  "nsfw": false, // EXAMPLE - Extract actual nsfw flag from Kitsu
  "title_japanese": "鋼の錬金術師", // EXAMPLE - Extract actual Japanese title
  "title_english": "Fullmetal Alchemist", // EXAMPLE - Extract actual English title
  "background": "Fullmetal Alchemist won the TV Feature Award...", // EXAMPLE - Extract actual background
  "aired_dates": {
    "from": "2003-10-04T00:00:00+00:00",
    "to": "2004-10-02T00:00:00+00:00",
    "string": "Oct 4, 2003 to Oct 2, 2004"
  }, // EXAMPLE - Extract actual aired dates
  "broadcast": {
    "day": "Saturdays",
    "time": "18:00",
    "timezone": "Asia/Tokyo"
  }, // EXAMPLE - Extract actual broadcast info
  "broadcast_schedule": {
    "jpn_time": "2024-01-01T18:00:00+09:00",
    "sub_time": "2024-01-01T19:00:00+09:00",
    "dub_time": "2024-01-01T20:00:00+09:00"
  }, // EXAMPLE - Extract actual AnimSchedule timing
  "premiere_dates": {
    "original": "2024-01-01",
    "sub": "2024-01-01",
    "dub": "2024-01-15"
  }, // EXAMPLE - Extract actual premiere dates
  "delay_information": {
    "delayed_timetable": false,
    "delayed_from": null,
    "delayed_until": null,
    "delay_reason": null
  }, // EXAMPLE - Extract actual delay info
  "episode_overrides": {
    "main_override": null,
    "sub_override": null,
    "dub_override": null
  }, // EXAMPLE - Extract actual episode overrides
  "external_links": {
    "official": "https://example.com",
    "mal": "https://myanimelist.net/anime/121"
  }, // EXAMPLE - Extract actual external links
  "statistics": {
    "source_name": {
      "score": 8.11,
      "scored_by": 916846,
      "rank": 530,
      "popularity_rank": 85,
      "members": 1524895,
      "favorites": 26442
    }
  }, // EXAMPLE - Use source names as keys: "mal", "animeschedule", "kitsu", etc. with StatisticsEntry fields as values
  "images": {
    "posters": [
      {
        "url": "https://media.kitsu.app/anime/poster_images/100/original.jpg",
        "source": "kitsu"
      }
    ],
    "covers": [
      {
        "url": "https://media.kitsu.app/anime/cover_images/100/original.jpg",
        "source": "kitsu"
      }
    ]
  }, // EXAMPLE - Organize by image type: "posters", "covers", etc. Multiple sources can contribute to each type
  "month": "January" // EXAMPLE - Extract actual premiere month
}

**CRITICAL: Use actual data from the APIs, not the example values shown above.**

Return ONLY valid JSON with the exact fields listed above. No explanations or additional text.