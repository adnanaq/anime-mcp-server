# STRUCTURED 4-AGENT CHARACTER PROCESSING SYSTEM

You are the **COORDINATOR AGENT** managing a specialized 4-agent character processing team. Each agent has a specific role and must process ALL characters in the dataset.

## AGENT ROLES AND RESPONSIBILITIES

### AGENT 1: NAME_PROCESSOR
- **Role**: Standardize character names and variations
- **Tasks**: 
  - Extract and normalize character names
  - Identify name variations and romanizations
  - Handle kanji/native name processing
- **Output**: Standardized name fields for all characters

### AGENT 2: METADATA_PROCESSOR  
- **Role**: Extract character metadata and descriptions
- **Tasks**:
  - Process character descriptions and roles
  - Extract age, gender, and other metadata
  - Standardize character IDs across platforms
- **Output**: Complete metadata for all characters

### AGENT 3: MEDIA_PROCESSOR
- **Role**: Handle character images and media links
- **Tasks**:
  - Process character image URLs
  - Validate image links and formats
  - Handle multiple image sources
- **Output**: Processed image data for all characters

### AGENT 4: VOICE_PROCESSOR
- **Role**: Process voice actor information
- **Tasks**:
  - Extract voice actor details
  - Organize by language
  - Handle multiple voice actors per character
- **Output**: Complete voice actor data for all characters

## COORDINATION PROTOCOL

### STEP 1: COORDINATOR ANALYSIS
Analyze the input data and distribute character processing tasks:
- Count total characters to process
- Identify data complexity patterns
- Assign processing responsibilities to each agent

### STEP 2: AGENT EXECUTION
Each agent processes their assigned data type for ALL characters:
- NAME_PROCESSOR: Handles names for characters 1-N
- METADATA_PROCESSOR: Handles metadata for characters 1-N  
- MEDIA_PROCESSOR: Handles images for characters 1-N
- VOICE_PROCESSOR: Handles voice actors for characters 1-N

### STEP 3: RESULT INTEGRATION
Coordinator combines all agent outputs into final character array.

## QUALITY CONTROL REQUIREMENTS

### VALIDATION RULES
- ✅ ALL characters from input must appear in output
- ✅ No character data can be lost or skipped
- ✅ Each character must have complete processing from all 4 agents
- ✅ Output format must match exact schema requirements

### ERROR HANDLING
- If any agent fails to process a character, mark it for manual review
- Ensure no character is processed twice
- Maintain character order from input data

## INPUT DATA
{characters_data}

## COORDINATION EXECUTION

**COORDINATOR INSTRUCTION**: 
1. Analyze the {characters_data} and count total characters
2. Coordinate the 4 specialized agents to process ALL characters
3. Ensure each agent completes their assigned data type for every character
4. Integrate results maintaining all character information

## OUTPUT SCHEMA
Return ONLY valid JSON with ALL characters processed:
{{
  "characters": [
    {{
      "name": "Character Full Name",
      "role": "Main/Supporting/Minor",
      "name_variations": ["Alternative names"],
      "name_kanji": "漢字名",
      "name_native": "Native Name", 
      "character_ids": {{"mal": 12345, "anilist": null}},
      "images": {{"mal": "image_url", "anilist": null}},
      "description": "Character description",
      "age": "Character age or null",
      "gender": "Male/Female/Other or null",
      "voice_actors": [
        {{"name": "Voice Actor Name", "language": "Japanese"}}
      ]
    }}
  ]
}}

**CRITICAL REQUIREMENT**: Process ALL characters from the input data. Each character must be processed by all 4 agents and included in the final output.

**EXECUTION**: Coordinate the 4 agents, ensure complete processing of all characters, and return ONLY the JSON result with no explanations or commentary.

IMPORTANT: Your response must be ONLY valid JSON. Do not include any text before or after the JSON. Do not explain your process. Return only the JSON object with the exact schema above.